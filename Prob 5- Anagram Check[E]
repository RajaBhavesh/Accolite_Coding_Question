//by Raja Bhavesh
// Difficulty Level-> Easy
//Question Link-> https://practice.geeksforgeeks.org/problems/anagram-1587115620/1

//Method 1->
//Sort the both string and compare them if they are same means they are anagrams to each other anfd if not means they aren't
//Time Complexity-> O(NlogN)
//Space Complexity-> O(1)

bool areAnagram(string str1, string str2)
{
    // Get lengths of both strings
    int n1 = str1.length();
    int n2 = str2.length();
 
    // If length of both strings is not same, then they
    // cannot be anagram
    if (n1 != n2)
        return false;
 
    // Sort both the strings
    sort(str1.begin(), str1.end());
    sort(str2.begin(), str2.end());
 
    // Compare sorted strings
    for (int i = 0; i < n1; i++)
        if (str1[i] != str2[i])
            return false;
 
    return true;
}


//Method 2->
//In this method we create 2 array of size 256 that is used to store the character frequency of charaters in both strings
//Then iterate from 0 to 255 in array and check that both array are same or not if not return false.
//Time Complexity-> O(N)
//Space Complexity-> O(1)

C++ Code->
#define NO_OF_CHARS 256
bool areAnagram(char* str1, char* str2)
{
    // Create 2 count arrays and initialize all values as 0
    int count1[NO_OF_CHARS] = { 0 };
    int count2[NO_OF_CHARS] = { 0 };
    int i;
 
    // For each character in input strings, increment count
    // in the corresponding count array
    for (i = 0; str1[i] && str2[i]; i++) {
        count1[str1[i]]++;
        count2[str2[i]]++;
    }
 
    // If both strings are of different length. Removing
    // this condition will make the program fail for strings
    // like "aaca" and "aca"
    if (str1[i] || str2[i])
        return false;
 
    // Compare count arrays
    for (i = 0; i < NO_OF_CHARS; i++)
        if (count1[i] != count2[i])
            return false;
 
    return true;
}


//Method 3->
//Slight modification in Method 2 i.e instead of using two array we use only 1 array to solve
//In case of traversing a string we use ++ and in case of traversing b string we update--;
//then finally traverse the array if non zero numbers found return false;

//Time Complexity-> O(N)
//Space Complexity-> O(1)
//C++ Code->
bool isAnagram(string a, string b){
        int array1[256]={0};
       
        for(int i=0;i<a.size();i++){
            array1[a[i]]++;
        }
        for(int i=0;i<b.size();i++){
            array1[b[i]]--;
        }
        for(int i=0;i<256;i++){
            if(array1[i]!=0){
                return false;
            }
        }
        return true;
    }

//Method 4-> 
//Using uordered_map to keep track of the frequency of character
//Time Complexity-> O(N)
//Space Complexity-> O(N)

C++ Code->
bool isAnagram(string a, string b)
{
 
    // Check if length of both strings is same or not
    if (a.length() != b.length()) {
        return false;
    }
    // Create a HashMap containing Character as Key and
    // Integer as Value. We will be storing character as
    // Key and count of character as Value.
    unordered_map<char, int> Map;
    // Loop over all character of String a and put in
    // HashMap.
    for (int i = 0; i < a.length(); i++) {
        Map[a[i]]++;
    }
    // Now loop over String b
    for (int i = 0; i < b.length(); i++) {
        // Check if current character already exists in
        // HashMap/map
        if (Map.find(b[i]) != Map.end()) {
            // If contains reduce count of that
            // character by 1 to indicate that current
            // character has been already counted as
            // idea here is to check if in last count of
            // all characters in last is zero which
            // means all characters in String a are
            // present in String b.
            Map[b[i]] -= 1;
        }
        else {
            return false;
        }
    }
 
    // Loop over all keys and check if all keys are 0.
    // If so it means it is anagram.
    for (auto items : Map) {
        if (items.second != 0) {
            return false;
        }
    }
    // Returning True as all keys are zero
    return true;
}

//Thanks !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
